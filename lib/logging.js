// Generated by CoffeeScript 1.10.0
(function() {
  var Logger;

  Logger = (function() {
    Logger.prototype.LEVEL = {
      silent: 0,
      error: 1,
      warn: 2,
      info: 4,
      log: 5,
      trace: 6,
      debug: 7
    };

    Logger.prototype.LEVELS = ['silent', 'error', 'warn', 'info', 'log', 'trace', 'debug'];

    function Logger(name1, arg) {
      var level, ref, ref1;
      this.name = name1;
      ref = arg != null ? arg : {}, this.prefix = ref.prefix, this.parent = ref.parent, level = ref.level;
      this.prefix = (ref1 = this.prefix) != null ? ref1 : this.name;
      this.children = {};
      this.setLevel(level || 'error');
    }

    Logger.prototype.setLevel = function(level) {
      var _level, child, i, len, logLevel, name, ref, ref1;
      if (level == null) {
        return this;
      }
      if (level !== this.level) {
        this.level = level;
        if (level in this.LEVEL) {
          _level = this.LEVEL[level];
        } else {
          _level = level;
        }
        ref = this.LEVELS;
        for (i = 0, len = ref.length; i < len; i++) {
          logLevel = ref[i];
          if (this.LEVEL[logLevel] <= _level) {
            if (console[logLevel]) {
              this[logLevel] = console[logLevel].bind(console, logLevel.toUpperCase(), this.prefix);
            } else {
              this[logLevel] = console.log.bind(console, logLevel.toUpperCase(), this.prefix);
            }
          } else {
            this[logLevel] = function() {};
          }
        }
      }
      ref1 = this.children;
      for (name in ref1) {
        child = ref1[name];
        child.setLevel(level);
      }
      return this;
    };

    Logger.prototype.setSpecLevel = function(level) {
      if (typeof atom !== "undefined" && atom !== null ? atom.inSpecMode() : void 0) {
        return this.setLevel(level);
      } else {
        return this;
      }
    };

    Logger.prototype.getLogger = function(name, arg) {
      var level, logger, part;
      level = (arg != null ? arg : {}).level;
      if (name == null) {
        return this;
      }
      if (typeof name === 'string') {
        name = name.split('.');
      }
      part = name.shift();
      if (!(part in this.children)) {
        this.children[part] = new Logger(part, {
          parent: this,
          level: level != null ? level : this.level
        });
      }
      logger = this.children[part];
      logger = name.length ? logger.getLogger(name) : logger;
      return logger.setLevel(level);
    };

    return Logger;

  })();

  module.exports = new Logger('', {
    parent: null,
    level: 'error'
  });

}).call(this);
